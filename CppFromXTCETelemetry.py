import xml.dom.minidom as dom
import re
import sys

def findElement(DOMObject, ElementName, AttributeName):
    elements = DOMObject.getElementsByTagName(ElementName)
    if(elements):
        for element in elements:
            if(element.getAttribute("name") == AttributeName):
                return element
        return None
    else:
        return None

def GetFromEntryList(EntryList, actualList):
    curChild = EntryList.firstChild    
    while(curChild is not None): 
        if(curChild.nodeName != "#text"):
            localName = curChild.localName
            if(localName == "ContainerRefEntry"):
                #container in a container, use recursion
                containerName = (re.sub('/.*/', '', curChild.getAttribute("containerRef")))
                GetFromEntryList(findElement(xtceDatabase, "xtce:SequenceContainer", containerName).getElementsByTagName("xtce:EntryList")[0], actualList)
            if(localName == "ParameterRefEntry"):
                paramName = (re.sub('/.*/', '', curChild.getAttribute("parameterRef")))
                actualList.append(paramName)
        curChild = curChild.nextSibling

def getContainerSize(ContainerList):
    telemetryPointer = 0
    for telemetryItem in TelemetryList:
        paramtype = getParamType(xtceDatabase, telemetryItem)

        if (paramtype == "long" or paramtype == "unsigned long"):
            telemetryPointer += 4*8
        
        if (paramtype == "bool"):
            telemetryPointer += 1

        if (paramtype == "short" or paramtype == "unsigned short"):  
            telemetryPointer += 16

        if (paramtype == "char" or paramtype == "unsigned char"):
            telemetryPointer += 8
    return int(telemetryPointer/8)


def getParamType(DOMObject, paramName):
    parameter = findElement(DOMObject, "xtce:Parameter", paramName)
    paramtypeName = re.sub('/.*/', '', parameter.getAttribute("parameterTypeRef"))
    paramType = None
    if(not paramType):
        paramType =findElement(DOMObject, "xtce:EnumeratedParameterType", paramtypeName)
    if(not paramType):
        paramType =findElement(DOMObject, "xtce:IntegerParameterType", paramtypeName)
    if(not paramType):
        paramType =findElement(DOMObject, "xtce:FloatParameterType", paramtypeName)
    # if(not paramType):
    #     paramType =findElement(DOMObject, "xtce:ArrayParameterType", paramtypeName)
    if(not paramType):
        print("PARAMETER TYPE %s NOT FOUND!" % paramName)
        return "unknown"

    encoding = paramType.getElementsByTagName("xtce:IntegerDataEncoding")[0]
    if(not encoding):
        print("PARAMETER TYPE %s HAS NO ENCODING!" % paramName)
        return "unknown"
    
    if (encoding.getAttribute("sizeInBits") == "1"):
        return "bool"

    if (encoding.getAttribute("sizeInBits") == "32"):
        if (encoding.getAttribute("encoding") == "unsigned"):
            return "unsigned long"
        else:
            return "long"

    if (encoding.getAttribute("sizeInBits") == "16"):
        if (encoding.getAttribute("encoding") == "unsigned"):
            return "unsigned short"
        else:
            return "short"

    if (encoding.getAttribute("sizeInBits") == "8"):
        if (encoding.getAttribute("encoding") == "unsigned"):
            return "unsigned char"
        else:
            return "char"

    print("PARAMETER TYPE %s HAS UNRECOGNIZED LENGTH!" % paramName)
    return "unknown"

if __name__ == "__main__":
    targetName = sys.argv[1]
    xtceDatabase = dom.parse(sys.argv[2])


    targetHouseKeepingContainerEntryList = findElement(xtceDatabase, "xtce:SequenceContainer", targetName+"HousekeepingContainer").getElementsByTagName("xtce:EntryList")[0]
    
    TelemetryList = []
    GetFromEntryList(targetHouseKeepingContainerEntryList, TelemetryList)

    ## Write HeaderFile!

    fo = open(targetName+"TelemetryContainer.h", 'w')
    fo.write("//File Generated By TelemetryFromXTCE.py\n\n")
    fo.write("#ifndef %sTELEMETRYCONTAINER_H_\n" % targetName)
    fo.write("#define %sTELEMETRYCONTAINER_H_\n\n" % targetName)
    fo.write("#include \"TelemetryContainer.h\"\n\n")
    fo.write("#define %s_CONTAINER_SIZE  %d\n\n" % (targetName, getContainerSize([])))
    fo.write("""class %sTelemetryContainer : public TelemetryContainer
{
protected:
""" % targetName)
    fo.write("unsigned char telemetry[%s_CONTAINER_SIZE];\n\n" % targetName)
    fo.write("""public:
    virtual int size();
    virtual unsigned char * getArray();\n
""")
    for telemetryItem in TelemetryList:
        if(telemetryItem == "SingleBitPadding"):
            continue
        paramtype = getParamType(xtceDatabase, telemetryItem)
        fo.write("    %s get%s();\n" % (paramtype, telemetryItem))
        fo.write("    void set%s(%s var);\n\n" % (telemetryItem, paramtype))
    fo.write("""};

#endif /* %sTELEMETRYCONTAINER_H_ */
""" % targetName)

    #write Cpp File!
    fo = open(targetName+"TelemetryContainer.cpp", 'w')
    fo.write("//File Generated By TelemetryFromXTCE.py\n\n")
    fo.write("#include \"%sTelemetryContainer.h\"\n\n" % targetName)
    fo.write("""int %sTelemetryContainer::size()
{
    return %s_CONTAINER_SIZE;
}\n\n""" % (targetName,targetName)) 
    fo.write("""unsigned char* %sTelemetryContainer::getArray()
{
    return &telemetry[0];
}\n\n""" % targetName)

    telemetryPointer = 0 ## bit pointer
    for telemetryItem in TelemetryList:
        if(telemetryItem == "SingleBitPadding"):
            telemetryPointer += 1
            continue
        paramtype = getParamType(xtceDatabase, telemetryItem)

        if (paramtype == "long" or paramtype == "unsigned long"):
            #Getter
            fo.write("%s %sTelemetryContainer::get%s()\n{\n" % (paramtype, targetName, telemetryItem))
            fo.write("""    unsigned long ulong;
    ((unsigned char *)&ulong)[3] = telemetry[%d];
    ((unsigned char *)&ulong)[2] = telemetry[%d];
    ((unsigned char *)&ulong)[1] = telemetry[%d];
    ((unsigned char *)&ulong)[0] = telemetry[%d];
    return ulong;\n"""% (int(telemetryPointer/8),int(telemetryPointer/8)+1,int(telemetryPointer/8)+2,int(telemetryPointer/8)+3))
            fo.write("}\n")
            #Setter
            fo.write("void %sTelemetryContainer::set%s(%s ulong)\n{\n" % (targetName, telemetryItem, paramtype))
            fo.write("""    telemetry[%d] = ((unsigned char *)&ulong)[3];
    telemetry[%d] = ((unsigned char *)&ulong)[2];
    telemetry[%d] = ((unsigned char *)&ulong)[1];
    telemetry[%d] = ((unsigned char *)&ulong)[0];\n"""% (int(telemetryPointer/8),int(telemetryPointer/8)+1,int(telemetryPointer/8)+2,int(telemetryPointer/8)+3))
            fo.write("}\n")
            #advance array pointer
            telemetryPointer += 4*8
        
        if (paramtype == "bool"):
            #Getter
            fo.write("%s %sTelemetryContainer::get%s()\n{\n" % (paramtype, targetName, telemetryItem))
            fo.write("    return ((telemetry[%d] & 0x%02x) != 0);\n" % (telemetryPointer/8, 1 << (7-telemetryPointer%8) ) )
            fo.write("}\n")
            #Setter
            fo.write("void %sTelemetryContainer::set%s(%s bval)\n{\n" % (targetName, telemetryItem, paramtype))
            fo.write("    telemetry[%d] &= (~0x%02x);\n" % (telemetryPointer/8, 1 << (7-telemetryPointer%8) ) )
            fo.write("    telemetry[%d] |= bval ? 0x%02x : 0x00;\n" % (telemetryPointer/8, 1 << (7-telemetryPointer%8) ) )
            fo.write("}\n")
            #advance array pointer
            telemetryPointer += 1

        if (paramtype == "short" or paramtype == "unsigned short"):
            #Getter
            fo.write("%s %sTelemetryContainer::get%s()\n{\n" % (paramtype, targetName, telemetryItem))
            fo.write("""    unsigned short ushort;
    ((unsigned char *)&ushort)[1] = telemetry[%d];
    ((unsigned char *)&ushort)[0] = telemetry[%d];
    return ushort;\n"""% (int(telemetryPointer/8),int(telemetryPointer/8)+1) )
            fo.write("}\n")
            #Setter
            fo.write("void %sTelemetryContainer::set%s(%s ushort)\n{\n" % (targetName, telemetryItem, paramtype))
            fo.write("""    telemetry[%d] = ((unsigned char *)&ushort)[1];
    telemetry[%d] = ((unsigned char *)&ushort)[0];\n"""% (int(telemetryPointer/8),int(telemetryPointer/8)+1) )
            fo.write("}\n")
            #advance array pointer
            telemetryPointer += 16

        if (paramtype == "char" or paramtype == "unsigned char"):
            #Getter
            fo.write("%s %sTelemetryContainer::get%s()\n{\n" % (paramtype, targetName, telemetryItem))
            fo.write("    return telemetry[%d];\n"""% (int(telemetryPointer/8)) )
            fo.write("}\n")
            #Setter
            fo.write("void %sTelemetryContainer::set%s(%s uchar)\n{\n" % (targetName, telemetryItem, paramtype))
            fo.write("    telemetry[%d] = uchar;\n" % (int(telemetryPointer/8)))
            fo.write("}\n")
            #advance array pointer
            telemetryPointer += 8

        if (paramtype == "unknown"):
            #shouldnt happen, get stuck
            print("error generating.")
            while(1):
                pass
